#!/usr/bin/env sh

#######################################################################################
# Description: Sample script to play files in apps by file type or mime
# Inspired by: nuke - a file handling/opening plugin for nnn
# Modified by: DiagoTheRogueHealer
# Difference from nuke: It only handles gui application. Because the preview
# 	script handles file previewes quite well, this only controls opening
#       of files in gui application. It tries to open the selected file in 
#	predefined applications and detach them from the existing session.
#
# Shell: POSIX compliant
# Usage: file-opener filepath
#
# Integration with nnn:
#   1. Export the required config:
#         export NNN_OPENER=/absolute/path/to/file-opener
#
# Details:
#   Guards against accidentally opening mime types like executables, shared libs etc.
#
#   Tries to play 'file' (1st argument) in the following order:
#   i. by extension
#   ii. by mime (image, video, audio, pdf)
#   iii. by mime (other file types)
#
# Dependencies(any of):
# 	pdf: zathura
# 	audio/video: mpv
# 	text/editor: vim
# 	archives: atool
# 	torrent: transmission/rtorrent
# 	image: imvr/sxiv/feh
# 	fallback: xdg-open
# Change the applications according to yours
#
set -euf -o noclobber -o noglob -o nounset
IFS="$(printf '%b_' '\n')"; IFS="${IFS%_}" # protect trailing \n"

PATH=$PATH:"${XDG_CONFIG_HOME:-$HOME/.config}/nnn/plugins"
CACHE_PATH="/tmp/nnn"

EDITOR="${EDITOR:-vim}"
TERMINAL="${TERMINAL:-st}"

FPATH="$1"
FNAME=$(basename "$1")
ext="${FNAME##*.}"
if [ -n "$ext" ]; then
	ext="$(printf "%s" "${ext}" | tr '[:upper:]' '[:lower:]')"
fi

# Set this to 1, if you want to extract
# archive files to specific directory.
# Uses your terminal to open another nnn
# instance in picker mode to get selected directories.
DIRECTORY_SPECIFIC_ARCHIVE_DECOMPRESS=1

######################################################################

exists() {
	which "$1" >/dev/null 2>&1
}

handle_pdf() {
	if exists zathura; then
		zathura "${FPATH}" >/dev/null 2>&1 &
	fi
	exit 0
}

handle_audio() {
	if exists mpv; then
		if pgrep mpv >/dev/null 2>&1; then
			pkill mpv >/dev/null 2>&1
		fi
		mpv "${FPATH}" >/dev/null 2>&1 &
		exit 0
	fi
}

handle_video() {
	if exists mpv; then
		if pgrep mpv >/dev/null 2>&1; then
			pkill mpv >/dev/null 2>&1
		fi
		mpv "${FPATH}" >/dev/null 2>&1 &
		exit 0
	fi
}

function handle_archive() {
    function get_target_dirs() {
        "${TERMINAL}" -e nnn -p /tmp/nnn-picked
        if [ -f /tmp/nnn-picked ]; then
	        cat /tmp/nnn-picked
	        rm -f /tmp/nnn-picked
        fi
    }
    
    function handle_file_extraction() {
        if [ ! -z "${target_dirs}" ]; then
		    for dir in $target_dirs; do
			    if [ -d "$dir" ]; then
			        if exists atool; then
				        atool -fX "${dir}/" "${FPATH}"
				    fi
			    fi
		    done
		    exit 0
		else
            atool -fX "$(dirname $FPATH)/" "${FPATH}"
			exit 0
	    fi
    }

    if [[ $DIRECTORY_SPECIFIC_ARCHIVE_DECOMPRESS -eq 1 ]]; then
        target_dirs=$(get_target_dirs)
        handle_file_extraction
    else
        atool -fX "$(dirname $FPATH)/" "${FPATH}"
        exit 0
    fi
}

handle_editor() {
	"${EDITOR}" "${FPATH}" >/dev/null 2>&1 &
	exit 0
}

function handle_image() {
    function abspath() {
	    case "$1" in
		    /*) printf "%s\n" "$1";;
		    *)  printf "%s\n" "$PWD/$1";;
	    esac
    }

    function listimages() {
	    find -L "$(dirname "$target")" -maxdepth 1 -type f -iregex \
		    '.*\(jpe?g\|bmp\|webp\|png\|gif\)$' -print0 | sort -z
    }

    function load_dir() {
	    target="$(abspath "$2")"
	    count="$(listimages | grep -a -m 1 -ZznF "$target" | cut -d: -f1)"
	
	    if [ -n "$count" ]; then
		    listimages | xargs -0 "$1" -n "$count" --
	    else
		    shift
		    "$1" -- "$@" # fallback
	    fi
    }

    if exists imvr; then
		load_dir imvr "${FPATH}" >/dev/null 2>&1 &
		exit 0
    elif exists sxiv; then
		load_dir sxiv "${FPATH}" >/dev/null 2>&1 &
			exit 0
    elif exists feh; then
        feh -B black -.Zd $(dirname "${FPATH}") --start-at "./${FNAME}" >/dev/null 2>&1 &
        exit 0
    fi
}

handle_extension() {
	case "$ext" in
		a|ace|alz|arc|arj|bz|bz2|cab|cpio|deb|gz|jar|lha|lz|lzh|lzma|lzo|rpm|rz|t7z|7z|tar|tbz|tbz2|tgz|tlz|txz|tZ|tzo|war|xpi|xz|Z|zip|rar)
			handle_archive
			exit 0
			;;
		pdf)
			handle_pdf
			exit 1
			;;
		aac|flac|m4a|mid|midi|mpa|mp2|mp3|ogg|wav|wma)
			handle_audio
			exit 1
			;;
		avi|mkv|mp4|gif)
			handle_video
			exit 1
			;;
		torrent)
			if exists rtorrent; then
				rtorrent "${FPATH}" >/dev/null 2>&1 &
				exit 0
			elif exists transmisson-show; then
				transmission-show -- "${FPATH}" >/dev/null 2>&1 &
				exit 0
			fi
			exit 1
			;;
		md|htm|html|xhtml|log|json)
			handle_editor
			exit 1
			;;
	esac
}

handle_multimedia() {
	mimetype="${1}"
	case "${mimetype}" in
		image/gif)
			handle_video
			exit1
			;;
		image/*)
		    handle_image
            exit 1
			;;
		audio/*)
			handle_audio
			exit 1
			;;
		video/*)
			handle_video
			exit 1
			;;
		application/pdf)
			handle_pdf
			exit 1
			;;
		text/* | */xml)
			handle_editor
			exit 1
			;;
        application/x-executable)
            "${FPATH}" >/dev/null 2>&1 &
            exit 0
            ;;
        application/x-pie-executable)
            "${TERMINAL}" -e "${FPATH}" >/dev/null 2>&1 &
            exit 0
            ;;
	esac
}

handle_blocked() {
	case "${MIMETYPE}" in
		application/x-sharedlib)
			exit 0;;
		application/x-shared-library-la)
			exit 0;;
		application/x-executable)
			exit 0;;
		application/x-shellscript)
			exit 0;;
		application/octet-stream)
			exit 0;;
	esac
}

handle_fallback() {
	if exists xdg-open; then
		xdg-open "${FPATH}" >/dev/null 2>&1 &
		exit 0
	fi
	exit 1
}

MIMETYPE="$(file --dereference --brief --mime-type -- "${FPATH}" )"
handle_extension
handle_multimedia "${MIMETYPE}"
handle_blocked "${MIMETYPE}"
handle_fallback

exit 1
