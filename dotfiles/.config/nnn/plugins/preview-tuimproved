#!/usr/bin/env sh

# Description: Terminal based file previewer
#
# Note: This plugin needs a "NNN_FIFO" to work. See man.
#
# Dependencies:
#    - Supports 3 independent methods to preview with:
#        - tmux (>=3.0), or
#        - kitty with allow_remote_control on, or
#        - $TERMINAL set to a terminal (it's xterm by default).
#    - less or $PAGER (for text preview)
#    - mktemp
#    ---------- OPTIONAL ---------
#    - tree or exa or ls (for listing directory items)
#    - mediainfo or exiftool or file (for file details)
#    - p7zip / 7z (for iso file preview)
#    - atool or bsdtar (for archive preview)
#    - man (for roff file preview) 
#    - ffmpegthumbnailer (for video thumbnails)
#    - bat (for code syntax highlighting)
#    - kitty terminal or catimg (for images inside terminal)
#    - pdftotext (for text preview of pdf files)
#    - glow or lowdown (for Markdown files preview)
#    - jq (optional for json preview)
#    - w3m (for html previews)
#    - xlsx2csv (for xlsx preview)
#    - transmission-show (for torrent files)
#
# Usage:
#   You need to set a NNN_FIFO path and a key for the plugin with NNN_PLUG,
#   then start `nnn`:
#
#     $ nnn -a
#
#   or
#
#     $ NNN_FIFO=/tmp/nnn.fifo nnn
#
#   Then in `nnn`, launch the `preview-tui` plugin.
#
#   If you provide the same NNN_FIFO to all nnn instances, there will be a
#   single common preview window. If you provide different FIFO path (e.g.
#   with -a), they will be independent.
#
#   The previews will be shown in a tmux split. If that isn't possible, it
#   will try to use a kitty terminal split. And as a final fallback, a
#   different terminal window will be used ($TERMINAL).
#
#   Tmux and kitty users can configure $SPLIT to either "h" or "v" to set a
#   'h'orizontal split or a 'v'ertical split (as in, the line that splits the
#   windows will be horizontal or vertical).
#
#   Kitty users need `allow_remote_control` set to `yes`. To customize the
#   window split, `enabled_layouts` has to be set to `all` or `splits` (the
#   former is the default value). This terminal is also able to show images
#   without extra dependencies.
#
# Shell: POSIX compliant
# Authors: Todd Yamakawa, LÃ©o Villeveygoux, @Recidiviste, Mario Ortiz Manero
# Modified by: DiagoTheRogueHealer

SPLIT="v"  # you can set a permanent split here
TERMINAL="${TERMINAL}"  # same goes for the terminal
PAGER="less -eRSFXc --mouse --wheel-lines=5"
CACHE_PATH="/tmp/nnn"
[ ! -d "$CACHE_PATH" ] && mkdir -p "$CACHE_PATH" 

[ "$PAGER" = "most" ] && PAGER="less -R"

if [ -e "${TMUX%%,*}" ] && tmux -V | grep -q '[ -][3456789]\.'; then
	TERMINAL=tmux
elif [ -n "$KITTY_WINDOW_ID" ] && kitty @ ls >/dev/null 2>&1; then
	TERMINAL=kitty
else
	TERMINAL="${TERMINAL:-st}" # Change according to your terminal
fi

if [ -z "$SPLIT" ] && [ $(($(tput lines) * 2)) -gt "$(tput cols)" ]; then
	SPLIT='h'
elif [ "$SPLIT" != 'h' ]; then
	SPLIT='v'
fi

# Check if a application exist
exists() {
	which "$1" >/dev/null 2>&1
}

# Pager
fifo_pager() {
	cmd="$1"
	shift

	# We use a FIFO to access $PAGER PID in jobs control
	tmpfifopath="${TMPDIR:-/tmp}/nnn-preview-tui-fifo.$$"
	mkfifo "$tmpfifopath" || return

    	$PAGER < "$tmpfifopath" &

    	(
        	exec > "$tmpfifopath"
        	"$cmd" "$@" &
    	)

    	rm "$tmpfifopath"
}


# Binary file: show file info inside the pager
print_file_info() {
    	header="-------- \033[1;31mFile Type Classification\033[0m --------\n"
 	if exists mediainfo; then
		fifo_pager echo -en "$header\n$(fmediainfo "$FILE" 2>/dev/null)"
	elif exists exiftool; then
		fifo_pager echo -en "$header\n$(exiftool "$FILE")"
    	else
		fifo_pager echo -en "$header\n$(file -b "$FILE")"
    	fi
}

preview_blocked() {
    	printf -- "-------- \033[1;31mPreview Not Available\033[0m --------\n"
        file -b "$FILE"
}

# Returns list of items in directory
handle_directory() {
	cd "$FILE" || return
	if exists tree; then
		fifo_pager tree -L 3 -F
	elif exists exa; then
		fifo_pager exa -G --colour=always 2>/dev/null
	else
		fifo_pager ls --color=always
	fi
}

# Returns list of items in archive
handle_archive() {
	if exists atool; then
		fifo_pager atool --list -- "$FILE"
	elif exists bsdtar; then
		fifo_pager bsdtar --list --file "$FILE"
	else
		print_file_info
	fi
}

# Converts a pdf to text file and returns the text
handle_pdf() {
	if exists pdftotext; then 
		fifo_pager pdftotext -l 10 -nopgbrk -q -- "$FILE" "$CACHE_PATH/converted-pdf.txt"
		if exists bat; then
			fifo_pager bat --terminal-width="$cols" --paging=never --decorations=always --color=always \
				"$CACHE_PATH/converted-pdf.txt" 2>/dev/null
		else
			$PAGER "$FILE" &
		fi
	else
		print_file_info
	fi

}

# Preview of image
handle_image() {
	if [ "$TERMINAL" = "kitty" ]; then
	# Kitty terminal users can use the native image preview method.
		kitty +kitten icat --silent --transfer-mode=stream --stdin=no "$FILE" &
	elif exists catimg; then
		catimg "$FILE"
	else
		print_file_info
	fi
}

handle_video() {
	if exists ffmpegthumbnailer; then
		ffmpegthumbnailer -i "$FILE" -t 60 -s 0 -f -o "$CACHE_PATH/video-thumbnail.jpeg" - >/dev/null 2>&1 && \
			kitty +kitten icat --silent --transfer-mode=stream --stdin=no "$CACHE_PATH/video-thumbnail.jpeg" & 
	else
		print_file_info
	fi
}

handle_gif() {
	if exists ffmpegthumbnailer; then
		ffmpegthumbnailer -i "$FILE" -s 0 -o "$CACHE_PATH/gif-thumbnail.jpeg" - >/dev/null 2>&1 && \
			kitty +kitten icat --silent --transfer-mode=stream --stdin=no "$CACHE_PATH/gif-thumbnail.jpeg" & 
	else
		print_file_info
	fi
}

handle_json() {
	if exists jq; then
		fifo_pager jq --color-output . "$FILE"
	else
		handle_text
	fi
}

handle_text() {
	if exists bat; then
		fifo_pager bat --terminal-width="$cols" --paging=never --decorations=always --color=always \
			"$FILE" 2>/dev/null
	else
		$PAGER "$FILE" &
	fi
}

handle_mimetype() {
	case "$mimetype" in
		application/x-sharedlib | application/x-shared-library-la | \
		application/x-executable | application/x-shellscript | application/octet-stream)
			preview_blocked ;;
		text/troff)
			if exists man; then
				fifo_pager man -Pcat -l "$FILE"
            else
                print_file_info
            fi
			;;
		image/vnd.djvu)
			print_file_info ;;
		text/* | */xml)
			handle_text ;;
		image/*)
			handle_image ;;
		audio/*)
			print_file_info ;;
		video/*)
			handle_video ;;
		application/pdf)
			handle_pdf ;;
		application/json)
			handle_json ;;
		*ms-excel)
			if exists xlsx2csv; then
				fifo_pager xlsx2csv "$FILE"
            else
                print_file_info
			fi
			;;
		*)
			print_file_info ;;
	esac
}

# Handles file and folder preview
preview_file () {
    	kill %- %+ 2>/dev/null && wait %- %+ 2>/dev/null
	clear
    	# Detecting the exact type of the file: the encoding, mime type, and
    	# extension in lowercase.
	FILE="$1"
    	encoding="$(file -Lb --mime-encoding -- "$FILE")"
    	mimetype="$(file -Lb --mime-type -- "$FILE")"
    	ext="${FILE##*.}"
    	if [ -n "$ext" ]; then
        	ext="$(printf "%s" "${ext}" | tr '[:upper:]' '[:lower:]')"
    	fi
    	lines=$(($(tput lines)-1))
    	cols=$(tput cols)

    	# If directory preview items inside directory
    	if [ -d "$FILE" ]; then
        	handle_directory
	# If file, handle file preview
	elif [ -f "$FILE" ]; then
		if [ ! -z "$ext" ]; then # Preview is handled depending on the file extension
			case "$ext" in 
				a|ace|alz|arc|arj|bz|bz2|cab|cpio|deb|gz|jar|\
				lha|lz|lzh|lzma|lzo|rpm|rz|t7z|7z|tar|tbz|tbz2|\
				tgz|tlz|txz|tZ|tzo|war|xpi|xz|Z|zip|rar)
					handle_archive
					;;
				iso) 
					if exists 7z; then
						fifo_pager 7z l -p -- "$1"
                    else
                        print_file_info
					fi
					;;
				aac|flac|m4a|mid|midi|mpa|mp2|mp3|ogg|wav|wma)
					print_file_info
					;;
				avi|mkv|mp4|webm|mov|wmv|flv) # ffmegthumbnailer for video thumbnails. Others for metadata preview
					handle_video
					;;
				gif)
					handle_gif
					;;
				log|txt) # Bat for syntax highlighting
					handle_text
					;;
				md)
					if exists glow; then
						fifo_pager glow "$1"
					elif exists lowdown; then
						fifo_pager lowdown "$1"
					else
						handle_text
					fi
					;;
				html|htm|xhtml) # w3m for html preview
					if exists w3m; then
						fifo_pager w3m -dump "$1"
					else
						handle_text
					fi
					;;
				#odt|ods|odp|sxw)
				#	if exists odt2txt; then
				#		fifo_pager odt2txt "$1"
				#	fi
				#	;;
				json) # Json preview
					handle_json
					;;
				torrent)
					if exists transmission-show; then
						fifo_pager transmission-show "$1"
                    else
                        print_file_info
                    fi
					;;
				dff|dsf|wv|wvc)
					if exists mediainfo; then
						fifo_pager mediainfo "$1"
					elif exists exiftool; then
						fifo_pager exiftool "$1"
                    else
                        print_file_info
					fi
					;;
				*)
					handle_mimetype
					;;
			esac
		else
			handle_mimetype
		fi
	
		
	fi
}

if [ "$PREVIEW_MODE" ] ; then
    if [ ! -r "$NNN_FIFO" ] ; then
        echo "No FIFO available! (\$NNN_FIFO='$NNN_FIFO')" >&2
        read -r
        exit 1
    fi

    preview_file "$1"

    # use cat instead of 'exec <' to avoid issues with dash shell
    # shellcheck disable=SC2002
    cat "$NNN_FIFO" |\
    while read -r selection ; do
        preview_file "$selection"
    done

    # Restoring the previous layout for kitty users. This will only work for
    # kitty >= 0.18.0.
    if [ "$TERMINAL" = "kitty" ]; then
        kitty @ last-used-layout --no-response >/dev/null 2>&1
    fi

    exit 0
fi

if [ "$TERMINAL" = "tmux" ]; then
    # tmux splits are inverted
    if [ "$SPLIT" = "v" ]; then SPLIT="h"; else SPLIT="v"; fi

    tmux split-window -e "NNN_FIFO=$NNN_FIFO" -e "PREVIEW_MODE=1" -d"$SPLIT" "$0" "$1"
elif [ "$TERMINAL" = "kitty" ]; then
    # Setting the layout for the new window. It will be restored after the
    # script ends.
    kitty @ goto-layout splits >/dev/null 2>&1

    # Trying to use kitty's integrated window management as the split window.
    # All environmental variables that will be used in the new window must
    # be explicitly passed.
    kitty @ launch --no-response --title "nnn preview" --keep-focus \
          --cwd "$PWD" --env "PATH=$PATH" --env "NNN_FIFO=$NNN_FIFO" \
          --env "PREVIEW_MODE=1" --env "PAGER=$PAGER" \
          --location "${SPLIT}split" "$0" "$1" >/dev/null
else
    PREVIEW_MODE=1 $TERMINAL -e "$0" "$1" &
fi
